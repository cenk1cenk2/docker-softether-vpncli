#!/bin/bash

# SOFTETHER START
echo "-----------------------------------------------------------------"
echo "Starting Softether Client..."
echo "-----------------------------------------------------------------"
/s6-bin/softether-vpncli/vpnclient start > /dev/null
echo "Get adapter name in the defined connection."
ADAPTERNAME=$(eval grep -E "DeviceName" /${CONNNAME:-defaultconn}.vpn | sed -r 's/.*DeviceName VPN(.*)$/\1/I' | sed 's/\r//g')
echo "Adapter Name: ${ADAPTERNAME}"
echo "Get account name in the defined connection."
ACCOUNTNAME=$(eval grep -E "AccountName" /${CONNNAME:-defaultconn}.vpn | sed -r 's/.*AccountName (.*)$/\1/' | sed 's/\r//g')
echo "Account Name: ${ACCOUNTNAME}"
echo "Creating new virtual ethernet adapter."
eval /s6-bin/softether-vpncli/vpncmd localhost /CLIENT /CMD nicdelete vpn${ADAPTERNAME}  > /dev/null
eval /s6-bin/softether-vpncli/vpncmd localhost /CLIENT /CMD niccreate vpn${ADAPTERNAME} > /dev/null
echo "Importing defined ${CONNNAME:-defaultconn} connection."
/s6-bin/softether-vpncli/vpncmd localhost /CLIENT /CMD accountdisconnect ${ACCOUNTNAME} > /dev/null
/s6-bin/softether-vpncli/vpncmd localhost /CLIENT /CMD accountdelete ${ACCOUNTNAME} > /dev/null
# Writing this with expect here because command line interface does not allow / in start of filename
# Maybe there is another way of doing that.
/usr/bin/expect > /dev/null<<EOD
set timeout -1
spawn /s6-bin/softether-vpncli/vpncmd localhost /CLIENT /CMD
expect "VPN Client>"
send "accountimport\r"
expect "Import Source File Name: "
send "/${CONNNAME:-defaultconn}.vpn\r"
expect "VPN Client>"
send "exit\r"
EOD

if ! [[ -z ${MACADD} ]]; then
    echo "-----------------------------------------------------------------"
    echo "MAC Address variable defined in enviromental variables."
    echo "Setting MAC address of the interface to: ${MACADD}"
    eval /s6-bin/softether-vpncli/vpncmd localhost /CLIENT /CMD nicsetsetting vpn${ADAPTERNAME} /MAC:${MACADD} > /dev/null
    eval /s6-bin/softether-vpncli/vpncmd localhost /CLIENT /CMD nicupgrade vpn${ADAPTERNAME} > /dev/null
    echo "Restart VPN Client for MAC Address to be set."
    echo "-----------------------------------------------------------------"
    echo
    /s6-bin/softether-vpncli/vpnclient stop > /dev/null
    /s6-bin/softether-vpncli/vpnclient start > /dev/null
fi

echo "Connecting to defined ${CONNNAME:-defaultconn} connection."
sleep 3
eval /s6-bin/softether-vpncli/vpncmd localhost /CLIENT /CMD accountconnect ${ACCOUNTNAME} > /dev/null

# This is only valid for internal connections.
if ! [[ -z ${INTCONN} ]]; then
    echo "-----------------------------------------------------------------"
    echo "Internal connection variable defined in enviromental variables."
    echo "Set adapter MTU to 1200."
    echo "-----------------------------------------------------------------"
    eval ip link set dev vpn_vpn${ADAPTERNAME} mtu 1200 > /dev/null
    eval ip link set vpn_vpn${ADAPTERNAME} down && sleep 1 && ip link set vpn_vpn${ADAPTERNAME} up > /dev/null
fi

echo "-----------------------------------------------------------------"
echo "Requesting IP Address from Server"
echo "-----------------------------------------------------------------"
eval dhclient vpn_vpn${ADAPTERNAME} > /dev/null
IPADDRESS=$(ifconfig vpn_vpn${ADAPTERNAME} | awk '/inet addr/{print substr($2,6)}')
if ! [[ -z "${IPADDRESS}" ]]; then
    echo "-----------------------------------------------------------------"
    echo "IP Address Obtained: ${IPADDRESS}"
    echo "-----------------------------------------------------------------"
    NETWORKADDRESS=$(echo ${IPADDRESS} | sed -r -e 's/^([0-9]*\.[0-9]*\.[0-9]*\.).*$/\1/')
    while ping -c 1 -W 10 "${NETWORKADDRESS}${NETWORKGATEWAY:-1}" >& /dev/null;:
    do
        echo "-----------------------------------------------------------------"
        echo "IP Address: ${IPADDRESS}"
        echo "Connection to ${NETWORKADDRESS}${NETWORKGATEWAY:-1} can be established. User has valid IP configuration."
        echo "Sleeping ${SLEEPTIME:-3600} seconds."
        echo "-----------------------------------------------------------------"
        sleep ${SLEEPTIME:-3600}
    done
else
    echo "-----------------------------------------------------------------"
    echo "err: Can not obtain IP Address."
    echo "Retrying to connect in 3 seconds."
    echo "-----------------------------------------------------------------"
    sleep 3
fi